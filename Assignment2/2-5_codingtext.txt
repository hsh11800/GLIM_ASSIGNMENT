#include <string>
#include <vector>

using namespace std;
#ifdef _DEBUG
#define ASSERT(expr)\
if (!(expr))\
{\
	_asm {\
	int 3\
	}\
}
#else
#define ASSERT(expr)
#endif

#define ARRAY_LENGTH(arr) sizeof((arr)) / sizeof((arr)[0])

enum
{
	MAX_LENGTH = 100,
	MIN_LENGTH = 1,
};


int solution(vector<vector<int>> board, int k) 
{
	const int boardSize = board.size();
	ASSERT(boardSize <= MAX_LENGTH);
	ASSERT(boardSize >= MIN_LENGTH);

	int sum = 0;
	int maxRow = min(boardSize - 1, k);
	for (int row = 0; row <= maxRow; ++row)
	{
		const vector<int> boardRow = board[row];
		const int boardColSize = boardRow.size();
		ASSERT(boardColSize <= MAX_LENGTH);
		ASSERT(boardColSize >= MIN_LENGTH);
		int maxCol = min(boardColSize - 1, k - row);
		for (int col = 0; col <= maxCol; ++col)
		{
			sum += boardRow[col];
		}
	}

	return sum;
}