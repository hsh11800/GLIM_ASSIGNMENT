#include <string>
#include <vector>
#include <unordered_map>
using namespace std;
#ifdef _DEBUG
#define ASSERT(expr)\
if (!(expr))\
{\
	_asm {\
	int 3\
	}\
}
#else
#define ASSERT(expr)
#endif

enum
{
	AMERICANO_PRICE = 4500,
	LATTE_PRICE = 5000,
};

typedef pair<string, int> menu_t;

int solution(vector<string> orders) {
	unordered_map<string, int> priceMap;
	priceMap.insert(menu_t("iceamericano", AMERICANO_PRICE));
	priceMap.insert(menu_t("americanoice", AMERICANO_PRICE));
	priceMap.insert(menu_t("hotamericano", AMERICANO_PRICE));
	priceMap.insert(menu_t("americanohot", AMERICANO_PRICE));
	priceMap.insert(menu_t("americano", AMERICANO_PRICE));
	priceMap.insert(menu_t("anything", AMERICANO_PRICE));
	priceMap.insert(menu_t("icecafelatte", LATTE_PRICE));
	priceMap.insert(menu_t("cafelatteice", LATTE_PRICE));
	priceMap.insert(menu_t("hotcafelatte", LATTE_PRICE));
	priceMap.insert(menu_t("cafelattehot", LATTE_PRICE));
	priceMap.insert(menu_t("cafelatte", LATTE_PRICE));

	int sum = 0;
	for (string& order : orders)
	{
		ASSERT(priceMap.find(order) != priceMap.end());
		sum += priceMap[order];
	}


	return sum;
}
